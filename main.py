import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler, CallbackQueryHandler
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
ASK_ORDER, CONFIRM_ORDER = range(2)

# –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
orders = []

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StuDO ‚Äî —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫—É—é –±–∏—Ä–∂—É –∑–∞–¥–∞–Ω–∏–π!\n"
        "–ß—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–ø–∏—à–∏ /order\n"
        "–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º, –Ω–∞–ø–∏—à–∏ /tasks"
    )

# –î–∏–∞–ª–æ–≥ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def order_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å (—á–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —Ç–µ–º –ª—É—á—à–µ):")
    return ASK_ORDER

async def receive_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["order_text"] = update.message.text
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
    ]
    await update.message.reply_text(
        f"–¢—ã —Ö–æ—á–µ—à—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑:\n\n{update.message.text}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONFIRM_ORDER

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    order = {
        "user_id": query.from_user.id,
        "username": query.from_user.username,
        "description": context.user_data.get("order_text")
    }
    orders.append(order)
    await query.edit_message_text("‚úÖ –ó–∞–∫–∞–∑ —Ä–∞–∑–º–µ—â—ë–Ω! –û–∂–∏–¥–∞–π –æ—Ç–∫–ª–∏–∫–æ–≤.")
    return ConversationHandler.END

async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
async def list_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not orders:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    msg = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
    for i, order in enumerate(orders, start=1):
        msg += (
            f"{i}. {order['description']}\n"
            f"‚Äî @{order['username']} (ID: {order['user_id']})\n\n"
        )
    await update.message.reply_text(msg)

# –ö–æ–º–∞–Ω–¥–∞ /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    order_conv = ConversationHandler(
        entry_points=[CommandHandler("order", order_start)],
        states={
            ASK_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_order)],
            CONFIRM_ORDER: [CallbackQueryHandler(confirm_order, pattern="confirm_order"),
                            CallbackQueryHandler(cancel_order, pattern="cancel_order")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(order_conv)
    app.add_handler(CommandHandler("tasks", list_orders))
    app.add_handler(CommandHandler("cancel", cancel))

    app.run_polling()

if __name__ == "__main__":
    main()
